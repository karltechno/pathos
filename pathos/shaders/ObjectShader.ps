#include "shaderlib/ShaderOutput.hlsli"
#include "shaderlib/GlobalSamplers.hlsli"
#include "shaderlib/LightingCommon.hlsli"
#include "shaderlib/CommonShared.h"
#include "shaderlib/DefinesShared.h"

#include "shaderlib/GFXPerFrameBindings.hlsli"


void SelectCascade(float3 _world, float _viewZ, out float _cascade, out float3 _lightSpace)
{
    // Branchless cascade selection (assuming 4 csm)
    float4 weights = _viewZ < g_frameCb.cascadeSplits;
    weights.yzw -= weights.xyz;
    _cascade = dot(weights, float4(0, 1, 2, 3));
    float4 coord = mul(float4(_world, 1.), g_frameCb.cascadeMatrices[_cascade]);

    _lightSpace = coord.xyz / coord.w;
}

float ComputeDirectionalShadow(float3 _world, float _viewZ, float3 _sunDir)
{
    float cascade;
    float3 shadowPos;
    SelectCascade(_world, _viewZ, cascade, shadowPos);

    return g_shadowCascades.SampleCmp(g_samplerCmp, float3(shadowPos.xy, cascade), shadowPos.z);
}

float4 main(in VSOut_ObjectFull_Material _input) : SV_Target
{
    float3 normal = normalize(_input.normal);
    float3 tangent = normalize(_input.tangentSign.xyz);
    float3x3 tbn = float3x3(tangent, ReconstructBitangent(normal, _input.tangentSign), normal);

    float3 color = float3(0.0, 0.0, 0.0);

    float3 view = normalize(g_frameCb.camPos - _input.posWS); 

    MaterialData materialData = g_materials[_input.materialIdx];

    float3 metalRough = g_bindlessTexArray[materialData.metalRoughTexIdx].Sample(g_samplerAnisoWrap, _input.uv).xyz;
    float3 normalTex = normalize(g_bindlessTexArray[materialData.normalMapTexIdx].Sample(g_samplerAnisoWrap, _input.uv).xyz * 2.0 - 1.0);
    normalTex = mul(normalTex, tbn);

    float roughness = metalRough.g * materialData.roughness;
    float metallic = metalRough.b * materialData.metalness;

    float3 baseCol = g_bindlessTexArray[materialData.albedoTexIdx].Sample(g_samplerAnisoWrap, _input.uv).xyz * materialData.baseColour.xyz;

    SurfaceData surf = CreateSurfaceData(normalTex, _input.posWS, metallic, roughness, baseCol);

    for(uint pointLightIdx = 0; pointLightIdx < g_frameCb.numPointLights; ++pointLightIdx)
    {
        LightData light = g_lights[pointLightIdx];
        color += ComputeLighting_Point(light, surf, view);
    }

    for(uint spotLightIdx = g_frameCb.numPointLights; spotLightIdx < g_frameCb.numSpotLights + g_frameCb.numPointLights; ++spotLightIdx)
    {
        LightData light = g_lights[spotLightIdx];
        color += ComputeLighting_Spot(light, surf, view);
    }

    float ao = g_bindlessTexArray[materialData.occlusionTexIdx].Sample(g_samplerLinearWrap, _input.uv).x;

    float dirShadow = ComputeDirectionalShadow(_input.posWS, _input.viewDepth, g_frameCb.sunDir);
    color += ComputeLighting_Common(g_frameCb.sunColor, surf, -g_frameCb.sunDir, view) * dirShadow * ao;
    
    float3 irrad = g_irrad.Sample(g_samplerLinearWrap, surf.norm).xyz;

    uint w,h,levels;
    g_ggxEnv.GetDimensions(0, w, h, levels);
    color += ComputeLighting_IBL(surf, view, irrad, g_ggxEnv, levels, g_ggxLut) * ao;

    return float4(color, 1);
}   